Overview
--------
We are working with trees of any size and nodes having any possible arity
(=number of children). The leaves are viewed as nodes with arity 0. All nodes
(more precisely, node values or labels) must be of the same type.
For technical reasons, this type must be endowed with an overloaded ==
operator.

4 sets of (template) classes are used:

* Tree<T>: the main class, implementing generic trees.
* BinaryTree<T>: restriction to trees where each node has at most 2 children
  (having only 1 child is accepted; in this case, you must think of it as the
  right child, the left child being "null"). This class derives from
  BinaryTree<T>.
* TreeException::BaseException and its derived classes: error handling.
* TreePrintCompanion<T>: an helper class for pretty-printing.

Detailed implementation
-----------------------
* Tree<T>:
  The supported (=public) methods of this class include:
  - construction from the new root and the children trees, or from a table
    giving the children of each node (please refer to the "tree.hh" header
    file for more details);
  - general information about the tree: size (=total number of nodes),
    depth (=height), number of leaves, number of inner nodes;
  - information about the root: label, arity, and children (as whole trees);
  - tree mapping;
  - traversals: pre-order, post-order, and breadth-first order searches. We
    chose to implement them without using recursion, in order to practice with
    common STL structures (vectors, stacks, queues);
  - developer-friendly representation and pretty-printing.

  Methods concerning a specific node other than the root are not part of the
  interface. In particular, it is not possible to extract a node (other than
  the root) nor a subtree (unless it is attached to the root), nor to add a
  node (anywhere else than on the top of the tree).

  A tree is implemented as follows. Its only attribute is the vector of its
  nodes, sorted w.r.t. pre-order search. A node is a pair consisting in a
  shared pointer to a label (=value) and a vector of ids. The id of a node is
  its rank (starting from 0) given by pre-order search. In the aforementioned
  vector of ids, the parent id comes first (the parent of the root being the
  root itself); then comes the id of the current node, and lastly the ids of
  the node's children (in ascending order).
  For access to children, we rejected the common implementation with pointers,
  because for tree mapping in particular, we want this accessing type be
  independent from T (the type labelling nodes), and we did not want to use
  the void* type in C++ either.

* BinaryTree<T>:
  Derives from Tree<T>, and therefore implements the same methods, except for
  constructors. For more details about the constructors, please refer to
  the "bin_tree.hh" header file.
  For binary trees, in-order search is also implemented.

* TreeException::BaseException and its derived classes: error handling. Please
  refer to the "tree_error.hh" header file for a comprehensive description of
  our exception class hierarchy.

* TreePrintCompanion<T>:
  This class is a wrapper containing all the objects needed for pretty-printing
  trees, in the way the Unix/MS-DOS utility "tree" does. This class has no
  other methods than trivial constructor and getters.
  The attributes are:
  - print_leaf: a function mapping T to std::string describing how to print
    the leaves,
  - print_node: object of the same type, for printing inner nodes,
  - print_root: object of the same type, for printing the root,
  - dashes: number of dashes to print on each line,
  - spaces: number of spaces to print before each node.
  All these attributes can be assigned default values to, please see the
  constructor interface / implementation in the "tree_pc.hh" / "tree_pc.hxx"
  files for more details.
